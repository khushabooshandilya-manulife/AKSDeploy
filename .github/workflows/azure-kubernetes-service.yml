# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code

on: [schedule]

env:
 AZURE_CONTAINER_REGISTRY: seagwamaksdevacr
 APP_NAME: bb2app
 RESOURCE_GROUP: seagwam-aks-dev-rg
 CLUSTER_NAME: seagwam-dev-aks
 NAMESPACE: ifunds-ns
 SECRET: acr-secret
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    # Connect to Azure Container Registry (ACR)
    - name: Login to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
        
    
   #  Container build and push to a Azure Container Registry (ACR)
   # - name: Build image and push to ACR
   #   run: |
   #    docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
   #     docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
   #   working-directory: ./<path-to-Dockerfile-directory>
      
    # Scan the image for vulnerabilities
    - name: Scan the image for vulnerabilities
      uses: azure/container-scan@v0
      with:
        image-name: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
        severity-threshold: CRITICAL
        run-quality-checks: true
    
 
    # Set Kubernetes Context
    - name: Gets K8s context
      uses: azure/aks-set-context@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
      id: login
      
    # Create namespace if doesn't exist
    - name: Create namespace in AKS if it doesn't exist
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -  

    # Create image pull secret for ACR
    - name: Create image pull secret
      uses: azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true


